<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<!--
		groupId:项目或者组织的唯一标志，并且配置时生成路径也是由此生成，如com.wzitech.chaos生成的相对路径为：/com/wzitech/chaos
	-->
	<groupId>com.658.framework</groupId>
	<artifactId>framework</artifactId>
	<!--
		项目的版本 如果pom的version标签中的值结尾是：-SNAPSHOT，将使用snapshots repository
		否则使用releases repository 命令是：mvn deploy
	-->
	<version>0.0.1-SNAPSHOT</version>
	<!--
		packaging:打包机制，如pom,jar,maven-plugin,ejb,war,ear,rar,par
	-->
	<packaging>pom</packaging>
	<name>${project.artifactId} v${project.version}</name>
	<!--
		项目描述
	-->
	<organization>
		<name>658</name>
		<url>http://www.658.com/</url>
	</organization>
	<properties>
		<!-- common setting -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.build.jdk.version>1.6</project.build.jdk.version>
		<!-- maven plugins setting -->
		<maven.compiler.plugin.version>2.3.2</maven.compiler.plugin.version>
		<maven.surefire.plugin.version>2.12</maven.surefire.plugin.version>
		<maven.failsafe.plugin.version>2.12</maven.failsafe.plugin.version>
		<surefire.junit47.version>2.12</surefire.junit47.version>
		<cobertura.maven.plugin.version>2.5.1</cobertura.maven.plugin.version>
		<maven.resources.plugin.version>2.5</maven.resources.plugin.version>
		<maven.war.plugin.version>2.2</maven.war.plugin.version>
		<maven.war.plugin.directory>src/main/webapp/WEB-INF</maven.war.plugin.directory>
		<maven.war.plugin.targetPath>WEB-INF</maven.war.plugin.targetPath>
		<maven.jar.plugin.version>2.3.2</maven.jar.plugin.version>
		<maven.deploy.plugin.version>2.7</maven.deploy.plugin.version>
		<jetty.version>9.2.14.v20151106</jetty.version>
		<sonar.maven.plugin.version>2.1</sonar.maven.plugin.version>
		<!-- logging -->
		<logback.version>1.0.1</logback.version>
		<slf4j.version>1.6.4</slf4j.version>
		<log4j.version>1.2.16</log4j.version>
		<log4jdbc4.version>1.2</log4jdbc4.version>
		<!-- test settings -->
		<junit.version>4.10</junit.version>
		<easymock.version>2.5.2</easymock.version>
		<selenium.version>2.20.0</selenium.version>
		<hamcrest.version>1.3.RC2</hamcrest.version>
		<mockito.version>1.9.0</mockito.version>
		<powermock.module.junit4.version>1.4.11</powermock.module.junit4.version>
		<powermock.api.mockito.version>1.4.11</powermock.api.mockito.version>
		<dbunit.version>2.4.8</dbunit.version>
		<!-- general utils settings -->
		<commons.lang.version>2.6</commons.lang.version>
		<commons.lang3.version>3.1</commons.lang3.version>
		<commons.beanutils.version>1.9.2</commons.beanutils.version>
		<commons.io.version>2.1</commons.io.version>
		<commons.collections.version>3.2.1</commons.collections.version>
		<commons.codec.version>1.6</commons.codec.version>
        <commons.fileupload.version>1.3</commons.fileupload.version>
		<!-- spring -->
		<spring.version>3.1.2.RELEASE</spring.version>
		<spring.data.jpa.version>1.0.3.RELEASE</spring.data.jpa.version>
		<aspectjrt.version>1.8.1</aspectjrt.version>
		<aspectjweaver.version>1.8.1</aspectjweaver.version>
		<aspectjtools.version>1.8.1</aspectjtools.version>
		<cglib.nodep.version>2.2.2</cglib.nodep.version>
		<cglib.version>2.2.2</cglib.version>
		<asm.version>3.3.1</asm.version>
		<spring.data.mongodb.version>1.2.1.RELEASE</spring.data.mongodb.version>
		<spring.data.solr.version>1.0.0.RELEASE</spring.data.solr.version>
		<!-- Database settings -->
		<solr.version>4.5.0</solr.version>
		<mongo.java.driver.version>2.10.1</mongo.java.driver.version>
		<jdbc.version>10.2.0.3.0</jdbc.version>
		<commons.dbcp.version>1.4</commons.dbcp.version>
		<commons.pool.version>1.6</commons.pool.version>
		<h2.version>1.3.164</h2.version>
		<!-- mybatis -->
		<ibatis.sqlmap.version>2.3.0</ibatis.sqlmap.version>
		<mybatis.version>3.1.0</mybatis.version>
		<mybatis.spring.version>1.1.0</mybatis.spring.version>
		<!-- hibernate -->
		<hibernate.version>4.2.6.Final</hibernate.version>
		<hibernate.validator.version>4.2.0.Final</hibernate.validator.version>
		<hibernate.jpa.2.0.api.version>1.0.1.Final</hibernate.jpa.2.0.api.version>
		<joda.time.hibernate.version>1.3</joda.time.hibernate.version>
		<!-- WS&RS -->
		<cxf.version>3.1.4</cxf.version>
		<jersey.version>1.12</jersey.version>
		<xmlbeans.version>2.5.0</xmlbeans.version>
		<jackson.version>1.9.8</jackson.version>
		<new.jackson.version>2.0.4</new.jackson.version>
		<!-- Other settings -->
		<servlet.api.version>2.5</servlet.api.version>
		<jstl.version>1.2</jstl.version>
		<jsp.version>2.0</jsp.version>
		<shiro.version>1.2.0</shiro.version>
		<activemq.version>5.10.0</activemq.version>
		<sitemesh.version>2.4.2</sitemesh.version>
		<velocity.version>1.4</velocity.version>
		<velocity.tools.version>1.4</velocity.tools.version>
		<perf4j.version>0.9.16</perf4j.version>
		<quartz.version>1.8.6</quartz.version>
		<spymemcached.version>2.8.0</spymemcached.version>
		<jmemcached.core.version>1.0.0</jmemcached.core.version>
		<ehcache.core.version>2.5.1</ehcache.core.version>
		<dom4j.version>1.6.1</dom4j.version>
		<jaxen.version>1.1.3</jaxen.version>
		<jaxb.api.version>2.2.11</jaxb.api.version>
		<jaxb.impl.version>2.2.11</jaxb.impl.version>
		<guava.version>11.0.2</guava.version>
		<joda.time.version>2.1</joda.time.version>
		<dozer.version>5.3.2</dozer.version>
		<poi.version>3.7</poi.version>
		<httpclient.version>4.2.1</httpclient.version>
		<jmagick.version>6.2.4</jmagick.version>
		<activation.version>1.1</activation.version>
		<mail.version>1.4</mail.version>
		<xbean-spring.version>3.18</xbean-spring.version>
		<jms-api.version>1.1-rev-1</jms-api.version>
		<disconf-client.version>2.6.30</disconf-client.version>
		<reflections.version>0.9.9-RC1</reflections.version>
		<zookeeper.version>3.3.6</zookeeper.version>
		<org.osgi.core.version>4.2.0</org.osgi.core.version>
		<javax.ws.rs-api.version>2.0.1</javax.ws.rs-api.version>
		<!-- repository setting -->
		<nexus.content.public.url>http://dev.658.com/nexus/content/groups/public/</nexus.content.public.url>
		<nexus.deploy.snapshot.url>http://dev.658.com/nexus/content/repositories/snapshots/</nexus.deploy.snapshot.url>
		<nexus.deploy.release.url>http://dev.658.com/nexus/content/repositories/releases/</nexus.deploy.release.url>
	</properties>
	<!-- 设定除中央仓库(repo1.maven.org/maven2/)外的其他仓库,按设定顺序进行查找. -->
	
	<modules>
		<!-- 工程模板包 -->
		<module>archetype</module>
		<!-- 缓存包 -->
		<module>cache</module>
		<!-- 公共包 -->
		<module>common</module>
		<!-- 数据访问包 -->
		<module>dataaccess</module>
		<!-- 异常包 -->
		<module>exception</module>
		<!-- 文件导出包 -->
		<module>export</module>
		<!-- 文件处理包 -->
		<module>file</module>
		<!-- 日志包 -->
		<module>logging</module>
		<!-- 任务调试包 -->
		<module>scheduling</module>
		<!-- 权限包 -->
		<module>security</module>
		<!-- 公享包，主要包括一些基本的工具类，及基本的实体类 -->
		<module>shared</module>
	</modules>
	
	<repositories>
		<!-- Nexus私服 -->
		<repository>
			<id>nexus</id>
			<name>Team Nexus Repository</name>
			<url>${nexus.content.public.url}</url> 
			<snapshots>
				<updatePolicy>always</updatePolicy>
			</snapshots>
			<releases>
				<updatePolicy>always</updatePolicy>
			</releases>
		</repository>
		<repository>
			<id>central</id>
			<name>Maven Official Repository</name>
			<url>http://repo1.maven.org/maven2</url>
			<snapshots>
				<enabled>false</enabled>
				<updatePolicy>always</updatePolicy>
			</snapshots>
			<releases>
				<updatePolicy>always</updatePolicy>
			</releases>
		</repository>
		<repository>
			<id>jboss</id>
			<name>JBoss Repository</name>
			<url>https://repository.jboss.org/nexus/content/groups/public/</url>
			<snapshots>
				<enabled>false</enabled>
				<updatePolicy>always</updatePolicy>
			</snapshots>
			<releases>
				<updatePolicy>always</updatePolicy>
			</releases>
		</repository>
		<repository>
			<id>springsource-repo</id>
			<name>SpringSource Repository</name>
			<url>http://repo.springsource.org/release</url>
			<snapshots>
				<enabled>false</enabled>
				<updatePolicy>always</updatePolicy>
			</snapshots>
			<releases>
				<updatePolicy>always</updatePolicy>
			</releases>
		</repository>
		<repository>
			<id>spring-milestone</id>
			<name>Spring Maven MILESTONE Repository</name>
			<url>http://repo.springsource.org/libs-milestone</url>
		</repository>
	</repositories>
	<!-- 设定插件仓库 如有Nexus私服, 取消注释并指向正确的服务器地址. -->
	<pluginRepositories> 
		<pluginRepository> 
			<id>nexus</id>
			<name>Team Nexus Repository</name>
			<url>${nexus.content.public.url}</url> 
			<snapshots>
				<enabled>false</enabled>
				<updatePolicy>always</updatePolicy>
			</snapshots>
		</pluginRepository>
		<pluginRepository>
			<id>central</id>
			<name>Maven Official Repository</name>
			<url>http://repo1.maven.org/maven2</url>
			<snapshots>
				<enabled>false</enabled>
				<updatePolicy>always</updatePolicy>
			</snapshots>
			<releases>
				<updatePolicy>always</updatePolicy>
			</releases>
		</pluginRepository>
		<pluginRepository>
			<id>jboss</id>
			<name>JBoss Repository</name>
			<url>https://repository.jboss.org/nexus/content/groups/public/</url>
			<snapshots>
				<enabled>false</enabled>
				<updatePolicy>always</updatePolicy>
			</snapshots>
			<releases>
				<updatePolicy>always</updatePolicy>
			</releases>
		</pluginRepository>
	</pluginRepositories>
	<build>
		<defaultGoal>install</defaultGoal>
		<plugins>
			<!-- compiler插件, 设定JDK版本 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven.compiler.plugin.version}</version>
				<configuration>
					<!--
						configuration:通常用于私有不开源的plugin,不能够详细了解plugin的内部工作原理，但使plugin满足的properties
					-->
					<source>${project.build.jdk.version}</source>
					<target>${project.build.jdk.version}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>
			<!-- test插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven.surefire.plugin.version}</version>
				<configuration>
					<argLine>-Dfile.encoding=UTF-8</argLine>
					<includes>
						<include implementation="java.lang.String">**/*TestAbstract.class</include>
						<include implementation="java.lang.String">**/*Test.class</include>
					</includes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>${maven.failsafe.plugin.version}</version>
				<dependencies>
					<dependency>
						<groupId>org.apache.maven.surefire</groupId>
						<artifactId>surefire-junit47</artifactId>
						<version>${surefire.junit47.version}</version>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<id>integration-test</id>
						<goals>
							<goal>integration-test</goal>
						</goals>
					</execution>
				</executions> 
			</plugin>
			<!-- cobertura插件 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>${cobertura.maven.plugin.version}</version>
			</plugin>
			<!-- war插件, 设定war名称不带版本号 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>${maven.war.plugin.version}</version>
				<configuration>
					<warName>${project.build.finalName}</warName>
					<webResources>
						<resource>
							<directory>${maven.war.plugin.directory}</directory>
							<targetPath>${maven.war.plugin.targetPath}</targetPath>
							<filtering>true</filtering>
						</resource>
					</webResources>
				</configuration>
			</plugin>
			<!-- resource插件, 设定编码 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven.resources.plugin.version}</version>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
                    <nonFilteredFileExtensions>
                        <nonFilteredFileExtension>p12</nonFilteredFileExtension>
                        <nonFilteredFileExtension>pem</nonFilteredFileExtension>
                        <nonFilteredFileExtension>pfx</nonFilteredFileExtension>
                        <nonFilteredFileExtension>jks</nonFilteredFileExtension>
                        <nonFilteredFileExtension>cer</nonFilteredFileExtension>
                        <nonFilteredFileExtension>cert</nonFilteredFileExtension>
                    </nonFilteredFileExtensions>
				</configuration>
			</plugin>
			<!-- jar相关插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.1.2</version>
			</plugin>
			<!--
				maven-release-plugin会自动帮我们签出刚才打的tag 然后打包 分发到远程Maven仓库中 至此，
				整个版本的升级，打标签，发布等工作全部完成。 我们可以在远程Maven仓库
				http://192.168.1.23:8089/nexus/content/repositories/releases/
				中看到正式发布的版本。
				<plugin> 
					<groupId>com.capgemini.platina.maven</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>2.0-platina-1</version> 
					<configuration>
						<goals>deploy</goals>
						<autoversionsubmodules>true</autoversionsubmodules> 
					</configuration>
				</plugin>
			-->
			<!-- eclipse插件,设定下载Source -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-eclipse-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<additionalProjectnatures>
						<projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
					</additionalProjectnatures>
					<additionalBuildcommands>
						<buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
					</additionalBuildcommands>
					<downloadSources>true</downloadSources>
					<downloadJavadocs>false</downloadJavadocs>
					<wtpversion>2.0</wtpversion>
				</configuration>
			</plugin>
			<!-- deploy插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>${maven.deploy.plugin.version}</version>
				<configuration>
					<skip>false</skip>
				</configuration>
			</plugin>
			<!-- jetty插件,设定重载模式 -->
			<plugin>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${jetty.version}</version>
				<configuration>
					<reload>manual</reload>
                    <stopPort>9988</stopPort>
                    <stopKey>foo</stopKey>
				</configuration>
			</plugin>
			<!-- dependency插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.4</version>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<version>1.3.1</version>
			</plugin>
			<!-- ant插件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<version>1.7</version>
			</plugin>
			<!-- exec java 插件 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
			</plugin>
			<!-- sonar插件 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>${sonar.maven.plugin.version}</version>
			</plugin>
			<!-- 增加更多的Source和Test Source目录插件 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.7</version>
			</plugin>
		</plugins>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
	</build>
	<profiles>
		<profile>
			<id>development</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<root.log.level>DEBUG</root.log.level>
				<spring.log.level>WARN</spring.log.level>
				<sql.log.level>DEBUG</sql.log.level>
				<project.log.level>DEBUG</project.log.level>
				<spring.profile>development</spring.profile>
			</properties>
		</profile>
        <profile>
            <id>test</id>
            <properties>
                <root.log.level>DEBUG</root.log.level>
                <spring.log.level>WARN</spring.log.level>
                <sql.log.level>DEBUG</sql.log.level>
                <project.log.level>DEBUG</project.log.level>
                <spring.profile>test</spring.profile>
            </properties>
        </profile>
		<profile>
			<id>production</id>
			<activation>
				<property>
					<name>env</name>
					<value>release</value>
				</property>
			</activation>
			<properties>
				<root.log.level>INFO</root.log.level>
				<spring.log.level>WARN</spring.log.level>
				<sql.log.level>INFO</sql.log.level>
				<project.log.level>INFO</project.log.level>
				<spring.profile>production</spring.profile>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<configuration>
							<debug>false</debug>
							<optimize>true</optimize>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
            <id>unit-test</id>
            <properties>
                <root.log.level>DEBUG</root.log.level>
                <spring.log.level>WARN</spring.log.level>
                <sql.log.level>DEBUG</sql.log.level>
                <project.log.level>DEBUG</project.log.level>
                <spring.profile>unit-test</spring.profile>
            </properties>
        </profile>
		<!-- 执行所有functional test-->
		<profile>
			<id>functional-test</id>
            <properties>
                <root.log.level>DEBUG</root.log.level>
                <spring.log.level>WARN</spring.log.level>
                <sql.log.level>DEBUG</sql.log.level>
                <project.log.level>DEBUG</project.log.level>
                <spring.profile>functional-test</spring.profile>
            </properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<includes>
								<include>**/*IT.java</include>
							</includes>
						</configuration>
					</plugin>	
				</plugins>
			</build>
		</profile>
		<!-- 仅执行smoke test-->
		<profile>
			<id>smoke-test</id>
            <properties>
                <root.log.level>DEBUG</root.log.level>
                <spring.log.level>WARN</spring.log.level>
                <sql.log.level>DEBUG</sql.log.level>
                <project.log.level>DEBUG</project.log.level>
                <spring.profile>smoke-test</spring.profile>
            </properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<groups>com.wzitech.chaos.framework.server.common.test.category.Smoke</groups>
							<includes>
								<include>**/*IT.java</include>
							</includes>
						</configuration>
					</plugin>		
				</plugins>
			</build>
		</profile>
		<!-- 忽略所有@Category(UnStable.class)的TestCase -->
		<profile>
			<id>skip-unstable</id>
            <properties>
                <root.log.level>DEBUG</root.log.level>
                <spring.log.level>WARN</spring.log.level>
                <sql.log.level>DEBUG</sql.log.level>
                <project.log.level>DEBUG</project.log.level>
                <spring.profile>skip-unstable</spring.profile>
            </properties>
			<build>
				<plugins>
					<!-- test plugin, exclude unstable case -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<excludedGroups>com.wzitech.chaos.framework.server.common.test.category.UnStable</excludedGroups>
						</configuration>
					</plugin>				
				</plugins>
			</build>
		</profile>
	</profiles>
	<!--
	 依赖范围:
	     compile（编译范围）:编译范围依赖在所有的classpath中可用，同时它们也会被打包
	     provided 它们不是传递性的，也不会被打包。
	     runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。
	     test（测试范围）编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用
	     system（系统范围）system范围依赖与provided类似但是你必须显式的提供一个对于本地系统中JAR文件的路径。
	     依赖范围（scope） 		主源码classpath可用			 测试源码classpath可用 		会被打包 
	  compile 缺省值			TRUE 						TRUE 						TRUE 
	  test 					FALSE 						TRUE 						FALSE 
	  runtime 				FALSE 						TRUE 						TRUE 
	  provided 				TRUE 						TRUE 						FALSE 
	 生命周期的引入 
		在Maven2中有了明确的生命周期概念，而且都提供与之对应的命令，使得项目构建更加清晰明了。主要的生命周期阶段： 
		validate，验证工程是否正确，所有需要的资源是否可用。 
		compile，编译项目的源代码。 
		test-compile，编译项目测试代码。 
		test，使用已编译的测试代码，测试已编译的源代码。 
		package，已发布的格式，如jar，将已编译的源代码打包。 
		integration-test，在集成测试可以运行的环境中处理和发布包。 
		verify，运行任何检查，验证包是否有效且达到质量标准。 
		install，把包安装在本地的repository中，可以被其他工程作为依赖来使用 
		deploy，在整合或者发布环境下执行，将最终版本的包拷贝到远程的repository，使得其他的开发者或者工程可以共享。 
		generate-sources，产生应用需要的任何额外的源代码，如xdoclet。
    -->
    <!-- 预定义依赖项的version,scope与exclusions,子项目中只需定义groupId 和 artifactId 即可 -->
    <dependencyManagement>
		<dependencies>
		<!-- SPRING begin -->
			<!-- spring basic -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>
				<version>${spring.version}</version>
				<exclusions>
					<exclusion>
						<groupId>commons-logging</groupId>
						<artifactId>commons-logging</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-beans</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context-support</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-expression</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- spring tx -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-aop</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-tx</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.aspectj</groupId>
				<artifactId>aspectjrt</artifactId>
				<version>${aspectjrt.version}</version>
			</dependency>
			<dependency>
				<groupId>org.aspectj</groupId>
				<artifactId>aspectjweaver</artifactId>
				<version>${aspectjweaver.version}</version>
			</dependency>
			<dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjtools</artifactId>
                <version>${aspectjtools.version}</version>
            </dependency>
			<dependency>
				<groupId>cglib</groupId>
				<artifactId>cglib-nodep</artifactId>
				<version>${cglib.nodep.version}</version>
			</dependency>
			<dependency>
				<groupId>cglib</groupId>
				<artifactId>cglib</artifactId>
				<version>${cglib.version}</version>
			</dependency>
			<!-- asm -->
			<dependency>
				<groupId>asm</groupId>
				<artifactId>asm</artifactId>
				<version>${asm.version}</version>
			</dependency>
			<!-- SPRING end -->
			<!-- PERSISTENCE begin -->
			<!-- hibernate -->
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-core</artifactId>
				<version>${hibernate.version}</version>
			</dependency>
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-entitymanager</artifactId>
				<version>${hibernate.version}</version>
			</dependency>
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-ehcache</artifactId>
				<version>${hibernate.version}</version>
			</dependency>
			<dependency>
				<groupId>org.hibernate.javax.persistence</groupId>
				<artifactId>hibernate-jpa-2.0-api</artifactId>
				<version>${hibernate.jpa.2.0.api.version}</version>
			</dependency>
			<dependency>
				<groupId>joda-time</groupId>
				<artifactId>joda-time-hibernate</artifactId>
				<version>${joda.time.hibernate.version}</version>
			</dependency>
			<!-- spring data jpa -->
			<dependency>
	            <groupId>org.springframework.data</groupId>
	            <artifactId>spring-data-jpa</artifactId>
	            <version>${spring.data.jpa.version}</version>
        	</dependency>
        	<!-- spring data redis -->
			<dependency>
				<groupId>org.springframework.data</groupId>
				<artifactId>spring-data-redis</artifactId>
				<version>1.0.1.RELEASE</version>
				<exclusions>
					<exclusion>
						<groupId>org.slf4j</groupId>
						<artifactId>slf4j-log4j12</artifactId>
					</exclusion>
					<exclusion>
						<groupId>log4j</groupId>
						<artifactId>log4j</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<!-- redis end -->
			<!-- mongodb begin -->
			<dependency>
				<groupId>org.mongodb</groupId>
				<artifactId>mongo-java-driver</artifactId>
				<version>${mongo.java.driver.version}</version>
				<type>jar</type>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.data</groupId>
				<artifactId>spring-data-mongodb</artifactId>
				<version>${spring.data.mongodb.version}</version>
				<type>jar</type>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.data</groupId>
				<artifactId>spring-data-mongodb-cross-store</artifactId>
				<version>${spring.data.mongodb.version}</version>
				<type>jar</type>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.data</groupId>
				<artifactId>spring-data-mongodb-log4j</artifactId>
				<version>${spring.data.mongodb.version}</version>
				<type>jar</type>
				<scope>compile</scope>
			</dependency>
			<!-- mongodb end -->
			<!-- solr start -->
			<dependency>
				<groupId>org.apache.hadoop</groupId>
				<artifactId>hadoop-annotations</artifactId>
				<version>2.0.5-alpha</version>
				<exclusions>
					<exclusion>
						<groupId>jdk.tools</groupId>
						<artifactId>jdk.tools</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.apache.solr</groupId>
				<artifactId>solr-core</artifactId>
				<version>${solr.version}</version>
				<exclusions>
					<exclusion>
						<artifactId>slf4j-log4j12</artifactId>
						<groupId>org.slf4j</groupId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.springframework.data</groupId>
				<artifactId>spring-data-solr</artifactId>
				<version>${spring.data.solr.version}</version>
			</dependency>
			<!-- solr end -->
			<!-- mybatis -->
			<dependency>
				<groupId>org.mybatis</groupId>
				<artifactId>mybatis</artifactId>
				<version>${mybatis.version}</version>
			</dependency>
			<dependency>
				<groupId>org.mybatis</groupId>
				<artifactId>mybatis-spring</artifactId>
				<version>${mybatis.spring.version}</version>
			</dependency>
			<!-- spring orm -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-orm</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-jdbc</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- optional datasource pool -->
			<dependency>
				<groupId>commons-dbcp</groupId>
				<artifactId>commons-dbcp</artifactId>
				<version>${commons.dbcp.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-pool</groupId>
				<artifactId>commons-pool</artifactId>
				<version>${commons.pool.version}</version>
			</dependency>
			<!-- PERSISTENCE end -->
			<!-- WEB begin -->
			<!-- spring mvc -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-web</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<!-- sitemesh -->
			<dependency>
				<groupId>opensymphony</groupId>
				<artifactId>sitemesh</artifactId>
				<version>${sitemesh.version}</version>
			</dependency>
			<!-- j2ee web spec -->
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>servlet-api</artifactId>
				<version>${servlet.api.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>jstl</artifactId>
				<version>${jstl.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>jsp-api</artifactId>
				<version>${jsp.version}</version>
				<scope>provided</scope>
			</dependency>
			<!-- WEB end -->
			<!-- SOAP begin -->
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-rt-core</artifactId>
				<version>${cxf.version}</version>
				<exclusions>
					<!-- use javax.mail.mail instead -->
					<exclusion>
						<groupId>org.apache.geronimo.specs</groupId>
						<artifactId>geronimo-javamail_1.4_spec</artifactId>
					</exclusion>
					<!-- use javax.activation.activation instead -->
					<exclusion>
						<groupId>org.apache.geronimo.specs</groupId>
						<artifactId>geronimo-activation_1.1_spec</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-rt-frontend-jaxws</artifactId>
				<version>${cxf.version}</version>
				<exclusions>
					<!-- see above -->
					<exclusion>
						<groupId>org.apache.geronimo.specs</groupId>
						<artifactId>geronimo-javamail_1.4_spec</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.apache.geronimo.specs</groupId>
						<artifactId>geronimo-activation_1.1_spec</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-rt-transports-http</artifactId>
				<version>${cxf.version}</version>
			</dependency>
			<!-- SOAP end -->
			<!-- REST begin -->
			<!-- cxf -->
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-rt-databinding-aegis</artifactId>
				<version>${cxf.version}</version>
		   	</dependency>
		   	<dependency>
				<groupId>org.apache.xmlbeans</groupId>
				<artifactId>xmlbeans</artifactId>
				<version>${xmlbeans.version}</version>
		   	</dependency>
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-rt-frontend-jaxrs</artifactId>
				<version>${cxf.version}</version>
		   	</dependency>
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-bundle</artifactId>
				<version>${cxf.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.cxf</groupId>
				<artifactId>cxf-bundle-jaxrs</artifactId>
				<version>${cxf.version}</version>
			</dependency>
			<!-- jersey -->
			<dependency>
				<groupId>com.sun.jersey</groupId>
				<artifactId>jersey-server</artifactId>
				<version>${jersey.version}</version>
			</dependency>
			<dependency>
				<groupId>com.sun.jersey</groupId>
				<artifactId>jersey-servlet</artifactId>
				<version>${jersey.version}</version>
			</dependency>
			<dependency>
				<groupId>com.sun.jersey</groupId>
				<artifactId>jersey-client</artifactId>
				<version>${jersey.version}</version>
			</dependency>
			<dependency>
				<groupId>com.sun.jersey</groupId>
				<artifactId>jersey-json</artifactId>
				<version>${jersey.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.codehaus.jettison</groupId>
						<artifactId>jettison</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>com.sun.jersey.contribs</groupId>
				<artifactId>jersey-spring</artifactId>
				<version>${jersey.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.springframework</groupId>
						<artifactId>spring</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.sun.jersey</groupId>
						<artifactId>jersey-grizzly2</artifactId>
					</exclusion>
					<exclusion>
						<groupId>com.sun.jersey</groupId>
						<artifactId>jersey-servlet</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>com.sun.jersey.contribs</groupId>
				<artifactId>jersey-multipart</artifactId>
				<version>${jersey.version}</version>
			</dependency>
			<!-- REST end -->
			<!-- SECURITY begin -->
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-core</artifactId>
				<version>${shiro.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-spring</artifactId>
				<version>${shiro.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-web</artifactId>
				<version>${shiro.version}</version>
			</dependency>
			<!-- SECURITY end -->
			<!-- JMS begin -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-jms</artifactId>
				<version>${spring.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.activemq</groupId>
				<artifactId>activemq-all</artifactId>
				<version>${activemq.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.activemq</groupId>
				<artifactId>activemq-client</artifactId>
				<version>${activemq.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.activemq</groupId>
				<artifactId>activemq-broker</artifactId>
				<version>${activemq.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.activemq</groupId>
				<artifactId>activemq-pool</artifactId>
				<version>${activemq.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.xbean</groupId>
				<artifactId>xbean-spring</artifactId>
				<version>${xbean-spring.version}</version>
			</dependency>
			<dependency>
				<groupId>javax.jms</groupId>
				<artifactId>jms-api</artifactId>
				<version>${jms-api.version}</version>
			</dependency>
			<!-- JMS end -->
			<!-- TIMER -->
			<dependency>
				<groupId>org.quartz-scheduler</groupId>
				<artifactId>quartz</artifactId>
				<version>${quartz.version}</version>
			</dependency>
			<!-- CACHE begin -->
			<!-- memcached -->
			<!-- sysmemcached is provided by springside repository -->
			<dependency>
				<groupId>spy</groupId>
				<artifactId>spymemcached</artifactId>
				<version>${spymemcached.version}</version>
			</dependency>
			<dependency>
				<groupId>com.thimbleware.jmemcached</groupId>
				<artifactId>jmemcached-core</artifactId>
				<version>${jmemcached.core.version}</version>
				<scope>test</scope>
			</dependency>
			<!-- ehcache -->
			<dependency>
				<groupId>net.sf.ehcache</groupId>
				<artifactId>ehcache-core</artifactId>
				<version>${ehcache.core.version}</version>
			</dependency>
			<!-- CACHE end -->
			<!-- LOGGING begin -->
			<!-- slf4j -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-api</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			<!-- slf4j logback绑定 -->
			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-classic</artifactId>
				<version>${logback.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-core</artifactId>
				<version>${logback.version}</version>
				<scope>provided</scope>
			</dependency>
			<!-- slf4j-log4j绑定 -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-log4j12</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			<!-- common-logging 转 slf4j -->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>jcl-over-slf4j</artifactId>
				<version>${slf4j.version}</version>
			</dependency>
			<!-- log4j -->
			<dependency>
				<groupId>log4j</groupId>
				<artifactId>log4j</artifactId>
				<version>${log4j.version}</version>
			</dependency>
			<!-- log4jdbc -->
			<!-- log4jdbc is provided by springside repository -->
			<dependency>
				<groupId>log4jdbc</groupId>
				<artifactId>log4jdbc4</artifactId>
				<version>${log4jdbc4.version}</version>
			</dependency>
			<!-- LOGGING end -->
			<!-- XML begin -->
			<dependency>
				<groupId>dom4j</groupId>
				<artifactId>dom4j</artifactId>
				<version>${dom4j.version}</version>
				<exclusions>
					<exclusion>
						<groupId>xml-apis</groupId>
						<artifactId>xml-apis</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<!-- 重新定义Java XPath Engine, exclude不必要的依赖 -->
			<dependency>
				<groupId>jaxen</groupId>
				<artifactId>jaxen</artifactId>
				<version>${jaxen.version}</version>
				<exclusions>
					<exclusion>
						<groupId>xerces</groupId>
						<artifactId>xercesImpl</artifactId>
					</exclusion>
					<exclusion>
						<groupId>xml-apis</groupId>
						<artifactId>xml-apis</artifactId>
					</exclusion>
					<exclusion>
						<groupId>dom4j</groupId>
						<artifactId>dom4j</artifactId>
					</exclusion>
					<exclusion>
						<groupId>jdom</groupId>
						<artifactId>jdom</artifactId>
					</exclusion>
					<exclusion>
						<groupId>xom</groupId>
						<artifactId>xom</artifactId>
					</exclusion>
					<exclusion>
						<groupId>maven-plugins</groupId>
						<artifactId>maven-cobertura-plugin</artifactId>
					</exclusion>
					<exclusion>
						<groupId>maven-plugins</groupId>
						<artifactId>maven-findbugs-plugin</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<!-- jaxb -->
			<dependency>
				<groupId>javax.xml.bind</groupId>
				<artifactId>jaxb-api</artifactId>
				<version>${jaxb.api.version}</version>
			</dependency>
			<dependency>
				<groupId>com.sun.xml.bind</groupId>
				<artifactId>jaxb-impl</artifactId>
				<version>${jaxb.impl.version}</version>
			</dependency>
			<!-- XML end -->
			<!-- JSON begin -->
			<dependency>
				<groupId>org.codehaus.jackson</groupId>
				<artifactId>jackson-core-asl</artifactId>
				<version>${jackson.version}</version>
			</dependency>
			<dependency>
				<groupId>org.codehaus.jackson</groupId>
				<artifactId>jackson-mapper-asl</artifactId>
				<version>${jackson.version}</version>
			</dependency>
			<dependency>
				<groupId>org.codehaus.jackson</groupId>
				<artifactId>jackson-jaxrs</artifactId>
				<version>${jackson.version}</version>
			</dependency>
			<dependency>
				<groupId>org.codehaus.jackson</groupId>
				<artifactId>jackson-xc</artifactId>
				<version>${jackson.version}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-core</artifactId>
				<version>${new.jackson.version}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>${new.jackson.version}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-annotations</artifactId>
				<version>${new.jackson.version}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.module</groupId>
				<artifactId>jackson-module-jaxb-annotations</artifactId>
				<version>${new.jackson.version}</version>
			</dependency>
			<dependency>
				<groupId>com.fasterxml.jackson.jaxrs</groupId>
				<artifactId>jackson-jaxrs-json-provider</artifactId>
				<version>${new.jackson.version}</version>
			</dependency>
			<!-- JSON end -->
			<!-- GENERAL UTILS begin -->
			<dependency>
				<groupId>commons-lang</groupId>
				<artifactId>commons-lang</artifactId>
				<version>${commons.lang.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${commons.lang3.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-fileupload</groupId>
				<artifactId>commons-fileupload</artifactId>
				<version>${commons.fileupload.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>commons-attributes</groupId>
				<artifactId>commons-attributes-api</artifactId>
				<version>${commons.attributes.api.version}</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons.io.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-collections</groupId>
				<artifactId>commons-collections</artifactId>
				<version>${commons.collections.version}</version>
			</dependency>
			<dependency>
				<groupId>commons-beanutils</groupId>
				<artifactId>commons-beanutils</artifactId>
				<version>${commons.beanutils.version}</version>
				<exclusions>
					<exclusion>
						<groupId>commons-logging</groupId>
						<artifactId>commons-logging</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>commons-codec</groupId>
				<artifactId>commons-codec</artifactId>
				<version>${commons.codec.version}</version>
			</dependency>
			<!-- google java library -->
			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>${guava.version}</version>
			</dependency>
			<!-- joda -->
			<dependency>
				<groupId>joda-time</groupId>
				<artifactId>joda-time</artifactId>
				<version>${joda.time.version}</version>
			</dependency>
			<!-- GENERAL UTILS end -->
			<!-- OTHER UTILS begin -->
			<!-- pojo copy -->
			<dependency>
				<groupId>net.sf.dozer</groupId>
				<artifactId>dozer</artifactId>
				<version>${dozer.version}</version>
			</dependency>
			<!-- excel -->
			<dependency>
				<groupId>org.apache.poi</groupId>
				<artifactId>poi</artifactId>
				<version>${poi.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.poi</groupId>
				<artifactId>poi-ooxml</artifactId>
				<version>${poi.version}</version>
				<scope>provided</scope>
			</dependency>
			<!-- validator -->
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-validator</artifactId>
				<version>${hibernate.validator.version}</version>
			</dependency>			
			<!-- httpclient -->
			<dependency>
				<groupId>org.apache.httpcomponents</groupId>
				<artifactId>httpclient</artifactId>
				<version>${httpclient.version}</version>
			</dependency>
			<!-- template engine -->
			<dependency>
				<groupId>org.freemarker</groupId>
				<artifactId>freemarker</artifactId>
				<version>${freemarker.version}</version>
			</dependency>
			<!-- email -->
			<dependency>
				<groupId>javax.mail</groupId>
				<artifactId>mail</artifactId>
				<version>${mail.version}</version>
			</dependency>
			<dependency>
				<groupId>javax.activation</groupId>
				<artifactId>activation</artifactId>
				<version>${activation.version}</version>
			</dependency>
			<!-- international component for Unicode -->
			<dependency>
				<groupId>com.ibm.icu</groupId>
				<artifactId>icu4j</artifactId>
				<version>${icu4j.version}</version>
			</dependency>
			<dependency>
				<groupId>jmagick</groupId>
				<artifactId>jmagick</artifactId>
				<version>${jmagick.version}</version>
			</dependency>
			<!-- OTHER UTILS end -->	
			<!-- TEST begin -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.hamcrest</groupId>
				<artifactId>hamcrest-core</artifactId>
				<version>${hamcrest.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.hamcrest</groupId>
				<artifactId>hamcrest-library</artifactId>
				<version>${hamcrest.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.mockito</groupId>
				<artifactId>mockito-core</artifactId>
				<version>${mockito.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.powermock</groupId>
				<artifactId>powermock-module-junit4</artifactId>
				<version>${powermock.module.junit4.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.powermock</groupId>
				<artifactId>powermock-api-mockito</artifactId>
				<version>${powermock.api.mockito.version}</version>
				<scope>test</scope>
				<exclusions>
					<exclusion>
						<groupId>org.mockito</groupId>
						<artifactId>mockito-all</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-test</artifactId>
				<version>${spring.version}</version>
				<scope>test</scope>
			</dependency>
			<!-- jetty -->
			<dependency>
				<groupId>org.eclipse.jetty</groupId>
				<artifactId>jetty-webapp</artifactId>
				<version>${jetty.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.eclipse.jetty.aggregate</groupId>
				<artifactId>jetty-webapp</artifactId>
				<version>${jetty.version}</version>
				<scope>test</scope>
			</dependency>			
			<!-- selenium 2.0 -->
			<dependency>
				<groupId>org.seleniumhq.selenium</groupId>
				<artifactId>selenium-java</artifactId>
				<version>${selenium.version}</version>
				<scope>test</scope>
				<exclusions>
					<exclusion>
						<groupId>org.seleniumhq.selenium</groupId>
						<artifactId>selenium-android-driver</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.seleniumhq.selenium</groupId>
						<artifactId>selenium-iphone-driver</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.seleniumhq.selenium</groupId>
				<artifactId>selenium-remote-driver</artifactId>
				<version>${selenium.version}</version>
				<scope>test</scope>
				<exclusions>
					<exclusion>
						<groupId>cglib</groupId>
						<artifactId>cglib-nodep</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.dbunit</groupId>
				<artifactId>dbunit</artifactId>
				<version>${dbunit.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>com.h2database</groupId>
				<artifactId>h2</artifactId>
				<version>${h2.version}</version>
				<scope>test</scope>
			</dependency>
			<!-- TEST end -->
			<!-- perf4j -->
			<dependency>
				<groupId>org.perf4j</groupId>
				<artifactId>perf4j</artifactId>
				<version>${perf4j.version}</version>
			</dependency>
			<!-- disconf config start -->
			<dependency>
				<groupId>com.baidu.disconf</groupId>
				<artifactId>disconf-client</artifactId>
				<version>${disconf-client.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.glassfish.hk2.external</groupId>
						<artifactId>cglib</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.reflections</groupId>
				<artifactId>reflections</artifactId>
				<version>${reflections.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.zookeeper</groupId>
				<artifactId>zookeeper</artifactId>
				<version>${zookeeper.version}</version>
			</dependency>
			<dependency>
				<groupId>org.osgi</groupId>
				<artifactId>org.osgi.core</artifactId>
				<version>${org.osgi.core.version}</version>
			</dependency>
			<dependency>
				<groupId>javax.ws.rs</groupId>
				<artifactId>javax.ws.rs-api</artifactId>
				<version>${javax.ws.rs-api.version}</version>
			</dependency>
			<!-- disconf config end -->
		</dependencies>
	</dependencyManagement>
	<distributionManagement>
		<snapshotRepository>
			<id>deploySnapshot</id>
			<name>Local Nexus Repository</name>
			<url>${nexus.deploy.snapshot.url}</url>
			<uniqueVersion>false</uniqueVersion>
		</snapshotRepository>
		<repository>
			<id>deployRelease</id>
			<name>Local Nexus Repository</name>
			<url>${nexus.deploy.release.url}</url>
			<uniqueVersion>false</uniqueVersion>
		</repository>
	</distributionManagement>
	<dependencies>
		<!-- test begin -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>
		<!-- test end -->
	</dependencies>
</project>